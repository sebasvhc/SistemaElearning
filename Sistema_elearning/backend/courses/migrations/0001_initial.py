# Generated by Django 5.2.1 on 2025-07-13 01:47

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('period', models.CharField(choices=[('I', 'Periodo I'), ('II', 'Periodo II')], default='I', max_length=2)),
                ('year', models.PositiveIntegerField(default=2025)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_finalized', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('material_type', models.CharField(choices=[('DOC', 'Documento'), ('VID', 'Video'), ('LNK', 'Enlace'), ('PPT', 'Presentación')], default='DOC', max_length=3)),
                ('file', models.FileField(blank=True, null=True, upload_to='course_materials/')),
                ('url', models.URLField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Gamification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_per_question', models.PositiveIntegerField(default=10)),
                ('badge_name', models.CharField(blank=True, max_length=100)),
                ('badge_image', models.ImageField(blank=True, null=True, upload_to='badges/')),
                ('xp_reward', models.PositiveIntegerField(default=100)),
                ('time_limit_minutes', models.PositiveIntegerField(blank=True, help_text='Límite de tiempo en minutos (opcional)', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='InstructionalObjective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('order', models.PositiveIntegerField(default=0)),
                ('weight', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('question_type', models.CharField(choices=[('MC', 'Multiple Choice'), ('TF', 'True/False'), ('SA', 'Short Answer')], default='MC', max_length=2)),
                ('options', models.JSONField(blank=True, default=list, help_text='Lista de opciones para preguntas de selección múltiple')),
                ('correct_answer', models.TextField(help_text='Respuesta correcta (puede ser texto o índice de opción)')),
                ('points', models.PositiveIntegerField(default=1)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('due_date', models.DateTimeField()),
                ('max_points', models.PositiveIntegerField(default=20, validators=[django.core.validators.MaxValueValidator(20)])),
            ],
        ),
        migrations.CreateModel(
            name='QuizObjective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='QuizSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answers', models.JSONField()),
                ('score', models.FloatField()),
                ('is_passed', models.BooleanField()),
                ('xp_earned', models.PositiveIntegerField(default=0)),
                ('new_badges', models.JSONField(default=list)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken', models.DurationField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
    ]
